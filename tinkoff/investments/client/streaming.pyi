from tinkoff.investments.model.base import FigiName
from tinkoff.investments.model.streaming import BaseEvent, BaseEventKey, EventName
from tinkoff.investments.model.market.candles import CandleResolution
from typing import Any, Callable, Dict, Type

class CandleEventStream:
    _subscribers: Dict[BaseEventKey, Callable] = ...
    def __call__(self, figi: FigiName, interval: CandleResolution): ...
    async def subscribe(self, callback, figi: FigiName, interval: CandleResolution) -> None: ...
    async def unsubscribe(self, figi: FigiName, interval: CandleResolution) -> None: ...

class OrderBookEventStream:
    _subscribers: Dict[BaseEventKey, Callable] = ...
    def __call__(self, figi: FigiName, depth: int): ...
    async def subscribe(self, callback, figi: FigiName, depth: int) -> None: ...
    async def unsubscribe(self, figi: FigiName, depth: int) -> None: ...

class InstrumentInfoEventStream:
    _subscribers: Dict[BaseEventKey, Callable] = ...
    def __call__(self, figi: FigiName): ...
    async def subscribe(self, callback, figi: FigiName) -> None: ...
    async def unsubscribe(self, figi: FigiName) -> None: ...

class EventsBroker:
    candles: CandleEventStream = CandleEventStream()
    orderbooks: OrderBookEventStream = OrderBookEventStream()
    instrument_info: InstrumentInfoEventStream = InstrumentInfoEventStream()
    _routes: Dict[EventName, Any] = ...
    def __init__(self) -> None: ...
    def add_publisher(self, client: StreamingClient) -> None: ...
    async def publish(self, event: BaseEvent) -> None: ...

# TODO: указать родительский класс
class StreamingClient:
    events: EventsBroker = EventsBroker()
    def __init__(self, token: str, events: EventsBroker = None) -> None: ...
